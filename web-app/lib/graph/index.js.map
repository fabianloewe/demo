{"version":3,"sources":["../../src/graph/index.js"],"names":["mapProperties","element","properties","undefined","Object","entries","map","key","value","includes","split","reduce","previousValue","currentValue","assign","buildNode","vertex","console","log","id","Math","random","label","labels","join","buildNodeAndLinksFromHyperedge","edge","nodes","edges","edgeAsNode","push","buildEdgeOut","outVertex","find","node","fromVertex","error","inVertex","source","target","buildEdgeIn","toVertex","buildMetaEdge","metaEdgeId","metaEdge","e","metaEdges","filter","createLinkBuilder","buildGraph","answer","data","vertices","buildLink","links","flatMap"],"mappings":"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","sourcesContent":["/**\n * Correctly formats the properties of element.\n *\n * @param element A vertex or edge object\n * @returns {undefined|{[string]: string}} Correctly formatted properties or null if they were null before.\n */\nfunction mapProperties(element) {\n\t// See the properties as a Map<String, String>\n\treturn element.properties !== undefined\n\t\t? Object\n\t\t\t.entries(element.properties)\n\t\t\t// For each property\n\t\t\t.map(([key, value]) => ({\n\t\t\t\t// If value has format <key>=<value>, keep only <value>\n\t\t\t\t[key]: value.includes(\"=\") ? value.split(\"=\")[1] : value\n\t\t\t}))\n\t\t\t// Join mapped objects\n\t\t\t.reduce(((previousValue, currentValue) => Object.assign(previousValue, currentValue)))\n\t\t: undefined;\n}\n\n/**\n * Build a force-graph compatible node from a vertex.\n *\n * @param vertex\n * @returns {{id: (*|string), label: string, properties: (undefined|{string?: string})}}\n */\nfunction buildNode(vertex) {\n\tconsole.log(\"Vertex:\", vertex);\n\treturn {\n\t\tid: vertex.id || Math.random(),\n\t\tlabel: (vertex.labels || [\"No label\"]).join(\" | \"),\n\t\tproperties: mapProperties(vertex)\n\t}\n}\n\n/**\n * Builds the EdgeOut and EdgeIn links from a hyperedge.\n *\n * It also adds the edge itself to the nodes\n * because hyperedges cannot be visualized directly.\n *\n * @param edge The edge to build a link from\n * @param nodes The already build nodes for the force-graph\n * @param edges The edges defined in the Answer message\n * @returns {({inVertex: (*|string), id: number, label: string, source: *, outVertex: *, properties: {}, target: {id: (*|string), label: string, properties: (undefined|{string?: string})}}|{inVertex: *, id: number, label: string, source: {id: (*|string), label: string, properties: (undefined|{string?: string})}, outVertex: (*|string), properties: {}, target: *})[]}\n */\nfunction buildNodeAndLinksFromHyperedge(edge, nodes, edges) {\n\tconsole.log(\"Building link from hyperedge:\", edge);\n\tconst edgeAsNode = buildNode(edge);\n\tnodes.push(edgeAsNode);\n\tconst buildEdgeOut = () => {\n\t\tconst outVertex = nodes.find(node => node.id === edge.fromVertex);\n\t\tif (outVertex === undefined) {\n\t\t\tconsole.error(`Source vertex with id ${edge.fromVertex} not found`);\n\t\t\treturn null;\n\t\t}\n\t\tconst inVertex = edgeAsNode;\n\t\treturn {\n\t\t\tid: Math.random(),\n\t\t\tlabel: \"EdgeOut\",\n\t\t\tproperties: {},\n\t\t\toutVertex: outVertex.id,\n\t\t\tinVertex: inVertex.id,\n\t\t\tsource: outVertex,\n\t\t\ttarget: inVertex,\n\t\t};\n\t}\n\tconst buildEdgeIn = () => {\n\t\tconst outVertex = edgeAsNode;\n\t\tconst inVertex = nodes.find(node => node.id === edge.toVertex);\n\t\tif (inVertex === undefined) {\n\t\t\tconsole.error(`Target vertex with id ${edge.toVertex} not found`);\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\tid: Math.random(),\n\t\t\tlabel: \"EdgeIn\",\n\t\t\tproperties: {},\n\t\t\toutVertex: outVertex.id,\n\t\t\tinVertex: inVertex.id,\n\t\t\tsource: outVertex,\n\t\t\ttarget: inVertex,\n\t\t};\n\t}\n\tconst buildMetaEdge = (metaEdgeId) => {\n\t\tconst metaEdge = edges.find(e => e.id === metaEdgeId);\n\t\tconst outVertex = edgeAsNode;\n\t\tconst inVertex = nodes.find(node => node.id === metaEdge.toVertex);\n\t\tif (inVertex === undefined) {\n\t\t\tconsole.error(`Target vertex with id ${edge.toVertex} not found`);\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\tid: metaEdgeId,\n\t\t\tlabel: \"MetaEdge\",\n\t\t\tproperties: mapProperties(metaEdge),\n\t\t\toutVertex: outVertex.id,\n\t\t\tinVertex: inVertex.id,\n\t\t\tsource: outVertex,\n\t\t\ttarget: inVertex,\n\t\t};\n\t};\n\n\treturn [\n\t\tbuildEdgeOut(),\n\t\tbuildEdgeIn(),\n\t\t...(edge.metaEdges || []).map(buildMetaEdge)\n\t].filter(e => e !== null);\n}\n\n/**\n * Build a force-graph compatible link from edge.\n *\n * @param nodes {[{id: (*|string), label: string, properties: (undefined|{string?: string})}]}\n * @param edges The edges defined in the Answer message\n * @returns {function(*=): (({inVertex: (*|string), id: number, label: string, source: *, outVertex: *, properties: {}, target: {id: (*|string), label: string, properties: (undefined|{string?: string})}}|{inVertex: *, id: number, label: string, source: {id: (*|string), label: string, properties: (undefined|{string?: string})}, outVertex: (*|string), properties: {}, target: *})[]|[]|[{inVertex: *|string, id, label, source: {id: (*|string), label: string, properties: (undefined|{string?: string})} | undefined, outVertex: *|string, properties: undefined|{string?: string}, target: {id: (*|string), label: string, properties: (undefined|{string?: string})} | undefined}])}\n */\nfunction createLinkBuilder(nodes, edges) {\n\treturn edge => {\n\t\t// If true, this is a specialized hyperedge, so handle it specially.\n\t\tif (edge.labels && edge.labels.includes(\"Edge\")) {\n\t\t\treturn buildNodeAndLinksFromHyperedge(edge, nodes, edges);\n\t\t}\n\t\t// Find the start vertex / the vertex this edge goes out of\n\t\tconst outVertex = nodes.find(node => edge.fromVertex === node.id);\n\t\t// Find the end vertex / the vertex this edge goes into\n\t\tconst inVertex = nodes.find(node => edge.toVertex === node.id);\n\t\tif (outVertex === undefined || inVertex === undefined) {\n\t\t\t// There is no corresponding vertex so we can't present this edge\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconsole.log(\"Edge:\", edge);\n\t\t\treturn [{\n\t\t\t\tid: edge.id || Math.random(),\n\t\t\t\tlabel: (edge.labels || [\"No label\"]).join(\" | \"),\n\t\t\t\tproperties: mapProperties(edge),\n\t\t\t\tinVertex: inVertex.id,\n\t\t\t\toutVertex: outVertex.id,\n\t\t\t\tsource: outVertex,\n\t\t\t\ttarget: inVertex\n\t\t\t}];\n\t\t}\n\t};\n}\n\n/**\n * Builds a react-force-graph compatible graph structure.\n *\n * @param answer The JSON representation of an Answer message\n * @returns {{nodes: [*], links: [*]}} An object containing an array of nodes aka vertices and one of links aka edges.\n */\nexport default function buildGraph(answer) {\n\tconsole.log(\"Building graph from answer:\", answer);\n\tconst nodes = (answer.data.vertices || []).map(buildNode);\n\tconst buildLink = createLinkBuilder(nodes, answer.data.edges);\n\tconst links = (answer.data.edges || []).flatMap(buildLink);\n\treturn {\n\t\tnodes,\n\t\tlinks\n\t}\n}\n"],"file":"index.js"}