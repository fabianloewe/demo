{"version":3,"sources":["../src/PeerService.js"],"names":["PeerService","config","host","createHost","Libp2p","create","addresses","listen","listenAddresses","modules","transport","TCP","connEncryption","SECIO","streamMuxer","MPLEX","peerDiscovery","Bootstrap","relay","enabled","hop","active","autoDial","bootstrap","interval","list","bootstrapPeers","connectToPeers","console","log","on","peerId","toB58String","connectionManager","conn","remotePeer","start","then","stop","dialPeer","peer","dial","stream","circuitPeers","filter","includes","streamPromises","map","Promise","all","streams","circuitStreams","concat"],"mappings":"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","sourcesContent":["import Libp2p from \"libp2p\";\nimport TCP from \"libp2p-tcp\";\nimport SECIO from \"libp2p-secio\";\nimport MPLEX from \"libp2p-mplex\";\nimport Bootstrap from \"libp2p-bootstrap\";\nimport QueryProtocol from \"./protocol/QueryProtocol\";\n\n/**\n * The JavaScript implementation of the PeerService\n */\nexport default class PeerService {\n\t/**\n\t * Initializes this service with the provided config.\n\t *\n\t * @param config A configuration object similar to the PeerConfig class\n\t */\n\tconstructor(config) {\n\t\tthis.config = config;\n\t\tthis.host = this.createHost();\n\t}\n\n\t/**\n\t * Creates a new libp2p instance based on the config.\n\t *\n\t * @returns {Promise<Libp2p>} A promise resolving to libp2p instance.\n\t */\n\tasync createHost() {\n\t\treturn Libp2p.create({\n\t\t\taddresses: {\n\t\t\t\tlisten: this.config.listenAddresses\n\t\t\t},\n\t\t\tmodules: {\n\t\t\t\ttransport: [TCP],\n\t\t\t\tconnEncryption: [SECIO],\n\t\t\t\tstreamMuxer: [MPLEX],\n\t\t\t\tpeerDiscovery: [Bootstrap],\n\t\t\t},\n\t\t\tconfig: {\n\t\t\t\trelay: {                   // Circuit Relay options (this config is part of libp2p core configurations)\n\t\t\t\t\tenabled: true,           // Allows you to dial and accept relayed connections. Does not make you a relay.\n\t\t\t\t\thop: {\n\t\t\t\t\t\tenabled: true,         // Allows you to be a relay for other peers\n\t\t\t\t\t\tactive: true           // You will attempt to dial destination peers if you are not connected to them\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpeerDiscovery: {\n\t\t\t\t\tautoDial: false, // Auto connect to discovered peers (limited by ConnectionManager minConnections)\n\t\t\t\t\t// The `tag` property will be searched when creating the instance of your Peer Discovery service.\n\t\t\t\t\t// The associated object, will be passed to the service when it is instantiated.\n\t\t\t\t\tbootstrap: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tinterval: 60e3,\n\t\t\t\t\t\tlist: this.config.bootstrapPeers // provide array of multiaddrs\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Starts this service.\n\t *\n\t * @returns {Promise<*>} A promise signaling when the service is started.\n\t */\n\tasync start(connectToPeers = true) {\n\t\tconsole.log(\"Starting service with config:\", this.config);\n\n\t\tconst host = await this.host;\n\t\thost.on('peer:discovery', peerId => {\n\t\t\tconsole.log('Discovered:', peerId.toB58String()); // Log discovered peer\n\t\t});\n\t\thost.connectionManager.on('peer:connect', conn => {\n\t\t\tconsole.log('Received connection from:', conn.remotePeer.toB58String()) // Log connected peer\n\t\t});\n\n\t\treturn host\n\t\t\t.start()\n\t\t\t.then(() => {\n\t\t\t\tif (connectToPeers) this.connectToPeers();\n\t\t\t});\n\t}\n\n\t/**\n\t * Stops this service.\n\t *\n\t * @returns {Promise<*>} A promise signaling when the service is stopped.\n\t */\n\tasync stop() {\n\t\tconsole.log(\"Stopping service..\");\n\t\treturn (await this.host).stop();\n\t}\n\n\t/**\n\t * Connects to all bootstrap peers.\n\t *\n\t * @returns {Promise<stream[]>} A promise containing an array of one stream per connected peer.\n\t */\n\tasync connectToPeers() {\n\t\tconst host = await this.host;\n\n\t\tconst dialPeer = async peer => {\n\t\t\tconsole.log(\"Connecting to peer:\", peer);\n\t\t\tconst conn = await host.dial(peer);\n\t\t\tconsole.log(\"Connection established\");\n\t\t\treturn conn.stream;\n\t\t};\n\n\t\tconst circuitPeers = this.config.bootstrapPeers\n\t\t\t.filter(peer => peer.includes(\"/p2p-circuit/\"));\n\n\t\tconst streamPromises = this.config.bootstrapPeers\n\t\t\t.filter(peer => !peer.includes(\"/p2p-circuit/\"))\n\t\t\t.map(dialPeer);\n\n\t\treturn Promise.all(streamPromises).then(async streams => {\n\t\t\tconst circuitStreams = await Promise.all(circuitPeers.map(dialPeer));\n\t\t\treturn streams.concat(circuitStreams);\n\t\t});\n\t}\n}\n"],"file":"PeerService.js"}