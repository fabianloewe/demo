{"version":3,"sources":["../../src/server/QueryHandler.js"],"names":["Deferred","promise","Promise","resolve","reject","QueryHandler","host","dbInfo","stream","console","log","queryProtocol","QueryProtocol","awaitAnswer","then","answer","error","req","res","protocolIds","SEND_ID","RESPOND_ID","dialProtocol","listenAddresses","query","body","status","json","end"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,Q,GACL,oBAAc;AAAA;;AAAA;AACb,OAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,IAAA,KAAI,CAACA,MAAL,GAAcA,MAAd;AACA,IAAA,KAAI,CAACD,OAAL,GAAeA,OAAf;AACA,GAHc,CAAf;AAIA,C;;IAGmBE,Y,GACpB,sBAAYC,IAAZ,EAAkBC,MAAlB,EAA0B;AAAA;;AAAA;AAAA,mEAWD,gBAAc;AAAA,QAAZC,MAAY,QAAZA,MAAY;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACA,QAAMC,aAAa,GAAG,IAAIC,yBAAJ,CAAkBJ,MAAlB,CAAtB,CAFsC,CAGtC;;AACAG,IAAAA,aAAa,CACXE,WADF,GAEEC,IAFF,CAEO,UAAAC,MAAM;AAAA,aAAI,MAAI,CAACA,MAAL,CAAYZ,OAAZ,CAAoBY,MAApB,CAAJ;AAAA,KAFb,WAGQ,UAAAC,KAAK;AAAA,aAAI,MAAI,CAACD,MAAL,CAAYX,MAAZ,CAAmBY,KAAnB,CAAJ;AAAA,KAHb;AAIAP,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,GApByB;AAAA;AAAA,8FA6BL,iBAAOO,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpB;AACMC,cAAAA,WAFc,GAEA,CAACP,0BAAcQ,OAAf,EAAwBR,0BAAcS,UAAtC,CAFA;AAAA;AAAA,qBAGG,MAAI,CAACf,IAAL,CAAUgB,YAAV,CAAuB,MAAI,CAACf,MAAL,CAAYgB,eAAZ,CAA4B,CAA5B,CAAvB,EAAuDJ,WAAvD,CAHH;;AAAA;AAAA;AAGbX,cAAAA,MAHa,yBAGbA,MAHa;AAIdG,cAAAA,aAJc,GAIE,IAAIC,yBAAJ,CAAkBJ,MAAlB,CAJF,EAKpB;;AALoB;AAAA,qBAMdG,aAAa,CAACa,KAAd,CAAoBP,GAAG,CAACQ,IAAxB,CANc;;AAAA;AAAA;AAAA,qBAQC,MAAI,CAACV,MAAL,CAAYd,OARb;;AAAA;AAQdc,cAAAA,MARc;AASpB;AACA,cAAA,MAAI,CAACA,MAAL,GAAc,IAAIf,QAAJ,EAAd,CAVoB,CAWpB;;AAXoB,+CAYbkB,GAAG,CACRQ,MADK,CACE,GADF,EAELC,IAFK,CAEAZ,MAFA,EAGLa,GAHK,EAZa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7BK;;AAAA;AAAA;AAAA;AAAA;AACzB,OAAKtB,IAAL,GAAYA,IAAZ;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKQ,MAAL,GAAc,IAAIf,QAAJ,EAAd;AACA;AAED","sourcesContent":["import QueryProtocol from \"../protocol/QueryProtocol\";\n\nclass Deferred {\n\tconstructor() {\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.reject = reject\n\t\t\tthis.resolve = resolve\n\t\t})\n\t}\n}\n\nexport default class QueryHandler {\n\tconstructor(host, dbInfo) {\n\t\tthis.host = host;\n\t\tthis.dbInfo = dbInfo;\n\t\tthis.answer = new Deferred();\n\t}\n\n\t/**\n\t * Handle incoming stream with QueryProtocol.\n\t *\n\t * @param stream Incoming stream\n\t */\n\thandleIncomingProtocol = ({stream}) => {\n\t\tconsole.log(\"Established new Query protocol connection...\");\n\t\tconst queryProtocol = new QueryProtocol(stream);\n\t\t// Await answer and store it in this.answer\n\t\tqueryProtocol\n\t\t\t.awaitAnswer()\n\t\t\t.then(answer => this.answer.resolve(answer))\n\t\t\t.catch(error => this.answer.reject(error));\n\t\tconsole.log(\"Got answer\");\n\t}\n\n\t/**\n\t * Handle the received query request from browser.\n\t *\n\t * @param req HTTP request\n\t * @param res HTTP response\n\t * @returns {Promise<*>}\n\t */\n\thandleQueryRequest = async (req, res) => {\n\t\t// Establish query protocol\n\t\tconst protocolIds = [QueryProtocol.SEND_ID, QueryProtocol.RESPOND_ID];\n\t\tconst {stream} = await this.host.dialProtocol(this.dbInfo.listenAddresses[0], protocolIds);\n\t\tconst queryProtocol = new QueryProtocol(stream);\n\t\t// Send query\n\t\tawait queryProtocol.query(req.body);\n\t\t// Await answer from handleIncomingProtocol\n\t\tconst answer = await this.answer.promise;\n\t\t// Reset answer\n\t\tthis.answer = new Deferred();\n\t\t// Send answer as JSON to browser\n\t\treturn res\n\t\t\t.status(200)\n\t\t\t.json(answer)\n\t\t\t.end();\n\t};\n}\n"],"file":"QueryHandler.js"}