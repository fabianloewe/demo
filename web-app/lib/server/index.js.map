{"version":3,"sources":["../../src/server/index.js"],"names":["readFileAsync","readFile","dev","process","env","NODE_ENV","app","handle","getRequestHandler","peer","program","requiredOption","String","parse","argv","readDbInfoFile","infoJson","data","JSON","toString","main","dbInfo","config","bootstrapPeers","listenAddresses","PeerService","start","host","peerId","toB58String","addresses","transportManager","getAddrs","map","addr","console","log","queryHandler","QueryHandler","QueryProtocol","RESPOND_ID","handleIncomingProtocol","prepare","webServer","use","bodyParser","json","express","post","handleQueryRequest","get","listen","err"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,aAAa,GAAG,qBAAUC,YAAV,CAAtB;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAArC;AACA,IAAMC,GAAG,GAAG,sBAAK;AAACJ,EAAAA,GAAG,EAAHA;AAAD,CAAL,CAAZ;AACA,IAAMK,MAAM,GAAGD,GAAG,CAACE,iBAAJ,EAAf;AACA,IAAIC,IAAJ;;AAEAC,mBACEC,cADF,CAEE,uBAFF,EAGE,0CAHF,EAIEC,MAJF;;AAOAF,mBAAQG,KAAR,CAAcV,OAAO,CAACW,IAAtB;;SAEeC,c;;;;;kGAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBf,aAAa,CAACU,mBAAQM,QAAT,CADjC;;AAAA;AACOC,YAAAA,IADP;AAAA,6CAEQC,IAAI,CAACL,KAAL,CAAWI,IAAI,CAACE,QAAL,EAAX,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeC,I;;;;;wFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBL,cAAc,EADpC;;AAAA;AACOM,YAAAA,MADP;AAEOC,YAAAA,MAFP,GAEgB;AACdC,cAAAA,cAAc,EAAEF,MAAM,CAACG;AADT,aAFhB,EAMC;;AACAf,YAAAA,IAAI,GAAG,IAAIgB,uBAAJ,CAAgBH,MAAhB,CAAP;AAPD;AAAA,mBAQOb,IAAI,CAACiB,KAAL,EARP;;AAAA;AAAA;AAAA,mBAWoBjB,IAAI,CAACkB,IAXzB;;AAAA;AAWOA,YAAAA,IAXP;AAYOC,YAAAA,MAZP,GAYgBD,IAAI,CAACC,MAAL,CAAYC,WAAZ,EAZhB;AAaOC,YAAAA,SAbP,GAamBH,IAAI,CAACI,gBAAL,CAAsBC,QAAtB,GAAiCC,GAAjC,CAAqC,UAAAC,IAAI;AAAA,+BAAOA,IAAP,kBAAmBN,MAAnB;AAAA,aAAzC,CAbnB;AAcCO,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCN,SAAvC;AAEMO,YAAAA,YAjBP,GAiBsB,IAAIC,wBAAJ,CAAiBX,IAAjB,EAAuBN,MAAvB,CAjBtB,EAkBC;;AACAM,YAAAA,IAAI,CAACpB,MAAL,CAAYgC,0BAAcC,UAA1B,EAAsCH,YAAY,CAACI,sBAAnD,EAnBD,CAqBC;;AArBD;AAAA,mBAsBOnC,GAAG,CAACoC,OAAJ,EAtBP;;AAAA;AAuBOC,YAAAA,SAvBP,GAuBmB,0BAvBnB,EAwBC;;AACAA,YAAAA,SAAS,CAACC,GAAV,CAAcC,uBAAWC,IAAX,EAAd,EAzBD,CA0BC;;AACAH,YAAAA,SAAS,CAACC,GAAV,CAAc,sBAAd,EAAsCG,8BAAe,qBAAf,CAAtC,EA3BD,CA4BC;;AACAJ,YAAAA,SAAS,CAACK,IAAV,CAAe,YAAf,EAA6BX,YAAY,CAACY,kBAA1C,EA7BD,CA8BC;;AACAN,YAAAA,SAAS,CAACO,GAAV,CAAc,GAAd,EAAmB3C,MAAnB,EA/BD,CAgCC;;AACAoC,YAAAA,SAAS,CAACQ,MAAV,CAAiB,IAAjB,EAAuB,UAAAC,GAAG,EAAI;AAC7B,kBAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTjB,cAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,aAHD;;AAjCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuCAhB,IAAI","sourcesContent":["import {parse} from \"url\";\nimport {readFile} from \"fs\";\nimport {promisify} from \"util\";\nimport next from \"next\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport {program} from \"commander\";\nimport PeerService from \"../PeerService\";\nimport QueryProtocol from \"../protocol/QueryProtocol\";\nimport QueryHandler from \"./QueryHandler\";\n\nconst readFileAsync = promisify(readFile);\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({dev});\nconst handle = app.getRequestHandler();\nlet peer;\n\nprogram\n\t.requiredOption(\n\t\t\"-i --info-json <path>\",\n\t\t\"Path to a peer-describing JSON info file\",\n\t\tString\n\t);\n\nprogram.parse(process.argv);\n\nasync function readDbInfoFile() {\n\tconst data = await readFileAsync(program.infoJson);\n\treturn JSON.parse(data.toString());\n}\n\nasync function main() {\n\tconst dbInfo = await readDbInfoFile();\n\tconst config = {\n\t\tbootstrapPeers: dbInfo.listenAddresses\n\t};\n\n\t// Start peer service\n\tpeer = new PeerService(config);\n\tawait peer.start();\n\n\t// Print addresses\n\tconst host = await peer.host;\n\tconst peerId = host.peerId.toB58String();\n\tconst addresses = host.transportManager.getAddrs().map(addr => `${addr}/p2p/${peerId}`);\n\tconsole.log(\"Started peer service\");\n\tconsole.log(\"Listening on addresses:\", addresses);\n\n\tconst queryHandler = new QueryHandler(host, dbInfo);\n\t// Handle incoming Answer messages\n\thost.handle(QueryProtocol.RESPOND_ID, queryHandler.handleIncomingProtocol);\n\n\t// Set up web server\n\tawait app.prepare();\n\tconst webServer = express();\n\t// Automatically parse POST data as JSON when Content-Type header is set to application/json\n\twebServer.use(bodyParser.json());\n\t// Handle chunks manually as Next.js seems to be buggy at this point.\n\twebServer.use(\"/_next/static/chunks\", express.static(\".next/static/chunks\"));\n\t// Register REST API route receiving queries from browser\n\twebServer.post(\"/api/query\", queryHandler.handleQueryRequest);\n\t// Let Next.js handle other requests\n\twebServer.get(\"*\", handle);\n\t// Begin listening on port 3000 for HTTP connections\n\twebServer.listen(3000, err => {\n\t\tif (err) throw err\n\t\tconsole.log('> Web server ready on http://localhost:3000');\n\t});\n}\n\nmain();\n"],"file":"index.js"}